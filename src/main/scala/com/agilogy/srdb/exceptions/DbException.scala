package com.agilogy.srdb.exceptions

trait DbException extends RuntimeException {
  val context: Context
  val sql: String
  val causedBy: Option[Throwable]
  lazy val causeMessage: Option[String] = causedBy.map(c => s"An exception of type ${c.getClass.getName} was thrown")
  override def getCause: Throwable = causedBy.orNull

  override def getMessage: String =
    s"""Error when ${context.causedWhen}
        |  SQL: "$sql"""".stripMargin +
      causeMessage.map(msg => s"\n  Cause: $msg").getOrElse("") +
      causedBy.map(c => s"\n  Cause message: ${c.getMessage}").getOrElse("")
}
case class NoKeysGenerated(sql: String) extends DbException {
  val context = Context.GetGeneratedKeys
  override lazy val causeMessage: Option[String] = Some("No key was generated by the execution of the statement")
  override val causedBy: Option[Throwable] = None
}
case class DbExceptionWithCause[T <: Throwable](context: Context, sql: String, actuallyCausedBy: T) extends DbException {
  override lazy val causedBy: Option[Throwable] = Some(actuallyCausedBy)
}
